#!/bin/sh
# install_backup - Copyright (c) 1994 - 1997 Ubique Ltd.
# This script creates the necessary scripts for backup of one database

# PLEASE MAKE SURE THAT THIS FILE IS EXECUTABLE
# BY USING chmod +x AFTER YOU SAVE IT

DBName=$1
DBBackupType=$2
DBBackupDir=$3
DBBackupDev=$DBBackupDir
ServicesRoot=$4
SybaseRoot=$5
SybaseDbLogThres=$6
noAdmin=$7
KeepOldData=$8
backupPlan=$9

SrvRoot=$ServicesRoot/$DBName
sqlDir=$SrvRoot/sql

#################################
# GENERATE autobackup threshold # 
#################################
if [ $backupPlan != "I" ]
then
# backup plan is not incremental - just truncate log
# if threshold is reached
cat << ! > $sqlDir/stp/autobackup.stp
CREATE PROCEDURE autobackup
AS
BEGIN
  DUMP TRAN $DBName WITH TRUNCATE_ONLY
END
GO
!
else
cat << ! > $sqlDir/stp/autobackup.stp
CREATE PROCEDURE autobackup
AS
BEGIN
  DECLARE @name varchar(200)
  DECLARE @timeString varchar(100)
  DECLARE @now smalldatetime
  SELECT @now = getdate()
  SELECT @timeString = ltrim(rtrim(str(datepart( year, @now ))))
  SELECT @timeString = @timeString + "-" + ltrim(rtrim(str(datepart( month, @now ))))
  SELECT @timeString = @timeString + "-" + ltrim(rtrim(str(datepart( day, @now ))))
  SELECT @timeString = @timeString + "-" + ltrim(rtrim(str(datepart( hour, @now ))))
  SELECT @timeString = @timeString + "." + ltrim(rtrim(str(datepart( minute, @now ))))
  SELECT @name = "$DBBackupDir/$DBName.tx."
  SELECT @name = @name + @timeString
  DUMP TRANSACTION $DBName TO @name
END
GO
!
fi

############################
# GENERATE backup.sql file #
############################
echo "creating backup script for" $DBName
if (test $DBBackupType = "disk") then
cat << ! > $ServicesRoot/backup_$DBName.sql
DUMP DATABASE $DBName TO '$DBBackupDir/$DBName.full.backupSet0'
GO
!
else
cat << ! > $ServicesRoot/backup_$DBName.sql
DUMP DATABASE $DBName TO '$DBBackupDev'
GO
!
fi

#####################################
# GENERATE incrementBackup.sql file # 
#####################################
if (test $DBBackupType = "disk") then
cat << ! > $ServicesRoot/incrementBackup_$DBName.sql
DECLARE @name varchar(200)
DECLARE @timeString varchar(100)
DECLARE @now smalldatetime
SELECT @now = getdate()
SELECT @timeString = ltrim(rtrim(str(datepart( year, @now ))))
SELECT @timeString = @timeString + "-" + ltrim(rtrim(str(datepart( month, @now ))))
SELECT @timeString = @timeString + "-" + ltrim(rtrim(str(datepart( day, @now ))))
SELECT @timeString = @timeString + "-" + ltrim(rtrim(str(datepart( hour, @now ))))
SELECT @timeString = @timeString + "." + ltrim(rtrim(str(datepart( minute, @now ))))
SELECT @name = "$DBBackupDir/$DBName.tx.backupSet0."
SELECT @name = @name + @timeString
DUMP TRANSACTION $DBName TO @name
GO
!
else
cat << ! > $ServicesRoot/incrementBackup_$DBName.sql
DUMP TRANSACTION $DBName TO '$DBBackupDev'
GO
!
fi

# threshold needs to be created only when DB content is created
if test $KeepOldData != "C"
then
  exit
fi

#####################################
# GENERATE threshold on log segment #
#####################################
cat << ! > $sqlDir/sql/createThreshold.sql
DECLARE @thresholdLevel int
DECLARE @doAdd bit
SELECT @doAdd = 1
SELECT @thresholdLevel = t.free_space 
  FROM systhresholds t, syssegments s 
  WHERE ( t.segment=s.segment ) AND
        ( s.name="logsegment" ) AND
        ( t.proc_name="autobackup" )
IF @thresholdLevel IS NOT NULL
BEGIN
  IF ( @thresholdLevel != $SybaseDbLogThres )
  BEGIN
    EXEC sp_dropthreshold $DBName, logsegment, @thresholdLevel
  END
  ELSE
    SELECT @doAdd = 0
END
IF @doAdd = 1
  EXEC sp_addthreshold $DBName,logsegment,$SybaseDbLogThres,autobackup
GO
!
