/* set a pending account change

   input:  account ID, 
		accountType (or NULL for no change)
		billingCycle (or NULL for no change)
		nameLimit (or NULL for no change)
		discount (or NULL for no change)
		unitCost (or NULL for no change)
   output: 0 = success
           20001 = account ID not found
*/
CREATE PROC setPendingAcctChange (
	@accountID userIdentifier,
	@accountType	tinyInt,
	@billingCycle	tinyInt,
	@nameLimit	tinyInt,
	@discount	float,
	@unitCost	smallmoney
)
AS
BEGIN
  DECLARE @lastError int
  DECLARE @aid  userIdentifier
  DECLARE @at	tinyInt
  DECLARE @bc	tinyInt
  DECLARE @nl	tinyInt
  DECLARE @disc	float
  DECLARE @uc	smallmoney

  BEGIN TRAN

    IF NOT EXISTS (SELECT * FROM userAccounts WHERE accountID= @accountID)
    BEGIN
      ROLLBACK TRAN 
      RETURN 20001
    END

    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN 
      RETURN @lastError
    END
select @aid

    /* create/update a pending change record */
    IF EXISTS( SELECT accountID
                 FROM pendingAcctChanges
                 WHERE accountID = @accountID )
    BEGIN
      /* update previous pending change */
      SELECT @at = accountType,
             @bc = billingCycle,
             @nl = nameLimit,
             @disc = discount,
             @uc = unitCost
        FROM pendingAcctChanges
        WHERE accountID = @accountID

      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN 
        RETURN @lastError
      END

      IF @accountType IS NULL
      BEGIN
        SELECT @accountType = @at
      END
      IF @billingCycle IS NULL
      BEGIN
        SELECT @billingCycle = @bc
      END
      IF @nameLimit IS NULL
      BEGIN
        SELECT @nameLimit = @nl
      END
      IF @discount IS NULL
      BEGIN
        SELECT @discount = @disc
      END
      IF @unitCost IS NULL
      BEGIN
        SELECT @unitCost = @uc
      END

      UPDATE pendingAcctChanges 
	SET accountType = @accountType,
	    billingCycle = @billingCycle,
	    nameLimit = @nameLimit,
	    discount = @discount,
	    unitCost = @unitCost
        WHERE accountID = @accountID

      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN 
        RETURN @lastError
      END
    END
    ELSE
    BEGIN
      /* create new change record */
      INSERT INTO pendingAcctChanges
	(accountID,accountType,billingCycle,nameLimit,discount,unitCost)
	VALUES(@accountID,@accountType,@billingCycle,@nameLimit,@discount,@unitCost)

      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN 
        RETURN @lastError
      END
    END /* end, no previous pending change */
  COMMIT TRAN
  RETURN 0
END
GO 
