/* delete one locally registered user account */
/* input:  nickName
   output: Return value - 0 - success 
                          20001 - No such user existed in database
                          20002 - User is account owner - we shouldn't
				delete these, but we will lock the 
				user name(s) for the account.

   Note: The delUserData trigger cleans up the other tables, such
   as registration, userDetails, userPrivileges, penalties, and warnings. 
*/
IF EXISTS(SELECT name FROM sysobjects WHERE name='deleteUser' AND type='P')
 DROP PROC deleteUser
GO
CREATE PROC deleteUser ( @nickName VPuserID )
AS
BEGIN
  DECLARE @lastError int
  DECLARE @diffFromGMT int
  DECLARE @currentDate VpTime
  DECLARE @userID userIdentifier
  DECLARE @accountID userIdentifier
  DECLARE @accountStatus int

  SET TRANSACTION ISOLATION LEVEL 0
  
  SELECT @nickName = lower(@nickName)
  
  BEGIN TRAN
    SELECT @userID = userID
      FROM users
      WHERE ( nickName = @nickName ) AND
            ( registrationMode = 2 )
    
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    IF @userID IS NULL
    BEGIN
      ROLLBACK TRAN
      RETURN 20001
    END

    SELECT @accountID = accountID
      FROM users, registration
      WHERE ( users.userID = @userID ) AND
            ( users.userID = registration.userID )
    
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    DECLARE @ownerID userIdentifier
    SELECT @ownerID = ownerID,
           @accountStatus = accountStatus
      FROM userAccounts
      WHERE accountID = @accountID
    
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    IF @ownerID = @userID
    BEGIN
      /*
       * If account is in the NEW state, this is an aborted
       * new-user registration. Go ahead and delete everything.
       */
      IF (@accountStatus = 1)
      BEGIN
        /*
         * Exception -- if this account has made a payment (likely a pending
         * eCheck) then don't delete it.
         */
        DECLARE @ctr INT
        SELECT  @ctr = 0
        SELECT @ctr = @ctr + COUNT(paymentID) FROM heldPayments WHERE accountID = @accountID
        SELECT @ctr = @ctr + COUNT(paymentID) FROM payments WHERE accountID = @accountID
        SELECT @ctr = @ctr + COUNT(accountID) FROM transactions WHERE accountID = @accountID AND completed = 1
        IF @ctr > 0
        BEGIN
          COMMIT TRAN
	  -- leave it in New status, so subsequent payment may work
          -- EXEC updateAccountStatus @accountID, 3
          RETURN 20002
        END

        /*
         * If upgrading a name to account owner, and backing out, 
         * put the name back into the old account (if possible).
         */
        DECLARE @oldAcctID userIdentifier
        SELECT @oldAcctID = oldAccountID
          FROM upgradedNames
          WHERE accountID = @accountID

        IF @oldAcctID IS NOT NULL
        BEGIN
          DECLARE @nameLimit int
          DECLARE @namesUsed int

          SELECT @nameLimit = nameLimit
            FROM userAccounts 
            WHERE accountID = @oldAcctID
          SELECT @namesUsed = COUNT(accountID)
            FROM registration
            WHERE accountID = @oldAcctID

          SELECT @lastError = @@error
          IF @lastError != 0
          BEGIN
            ROLLBACK TRAN
            RETURN @lastError
          END
          IF @namesUsed < @nameLimit
          BEGIN
            DELETE emailForwarding  WHERE userID IN (SELECT userID FROM registration WHERE accountID = @accountID)
            DELETE userAccounts     WHERE accountID = @accountID
            DELETE accountBalance   WHERE accountID = @accountID
            DELETE subscriptions    WHERE accountID = @accountID
            DELETE renewals         WHERE accountID = @accountID
            DELETE transactions     WHERE accountID = @accountID
            DELETE upgradedNames    WHERE accountID = @accountID
            UPDATE registration SET accountID = @oldAcctID WHERE userID = @userID

            SELECT @lastError = @@error
            IF @lastError != 0
            BEGIN
              ROLLBACK TRAN
              RETURN @lastError
            END

            IF EXISTS ( SELECT * FROM referrals WHERE accountID = @accountID )
            BEGIN
              DELETE referrals WHERE accountID = @accountID
            END
            IF EXISTS ( SELECT * FROM invitations WHERE accountID = @accountID )
            BEGIN
              UPDATE invitations SET accountID = NULL WHERE accountID = @accountID
            END

            SELECT @lastError = @@error
            IF @lastError != 0
            BEGIN
              ROLLBACK TRAN
              RETURN @lastError
            END

            SELECT @accountStatus = accountStatus
              FROM userAccounts
              WHERE accountID = @oldAcctID

            IF @accountStatus = 0 OR @accountStatus = 2
            BEGIN
              UPDATE users SET locked = 0 WHERE userID = @userID
            END

            SELECT @lastError = @@error
            IF @lastError != 0
            BEGIN
              ROLLBACK TRAN
              RETURN @lastError
            END

            COMMIT TRAN
            RETURN 0
          END
        END

        /*
         * OK it's really safe to delete everything
         */
        DELETE registration    WHERE userID = @userID
        DELETE userDetails     WHERE userID = @userID
        DELETE accountBalance  WHERE accountID = @accountID
        DELETE subscriptions   WHERE accountID = @accountID
	DELETE ccPayments      WHERE paymentID IN (SELECT paymentID FROM payments WHERE accountID = @accountID)
	DELETE runningBalance  WHERE paymentID IN (SELECT paymentID FROM payments WHERE accountID = @accountID)
	DELETE runningBalance  WHERE paymentID IN (SELECT paymentID FROM heldPayments WHERE accountID = @accountID)
        DELETE payments        WHERE accountID = @accountID
        DELETE heldPayments    WHERE accountID = @accountID
        DELETE referralHistory WHERE accountID = @accountID
        DELETE referralPrefs   WHERE accountID = @accountID
        DELETE referrals       WHERE accountID = @accountID
        DELETE renewals        WHERE accountID = @accountID
        DELETE reminders       WHERE accountID = @accountID
        DELETE userAccounts    WHERE accountID = @accountID
        DELETE accountHistory  WHERE accountID = @accountID
        DELETE transactions    WHERE accountID = @accountID
        DELETE emailForwarding WHERE userID IN (SELECT userID FROM registration WHERE accountID = @accountID)
        DELETE pendingServices WHERE serviceID IN (SELECT serviceID FROM services WHERE accountID = @accountID)
        DELETE services	       WHERE accountID = @accountID
        DELETE users           WHERE userID = @userID

        IF EXISTS ( SELECT * FROM referrals WHERE accountID = @accountID )
        BEGIN
          DELETE referrals WHERE accountID = @accountID
        END
        IF EXISTS ( SELECT * FROM invitations WHERE accountID = @accountID )
        BEGIN
          UPDATE invitations SET accountID = NULL WHERE accountID = @accountID
        END
        IF EXISTS ( SELECT * FROM userPoints WHERE userID = @userID )
        BEGIN
          DELETE userPoints WHERE userID = @userID
        END

        SELECT @lastError = @@error
        IF @lastError != 0
        BEGIN
          ROLLBACK TRAN
          RETURN @lastError
        END
        COMMIT TRAN
      END
      ELSE BEGIN
        
        /*
         * User is an account owner, don't actually delete but
         * lock out all users for this account and set account status.
         */
        COMMIT TRAN
        EXEC updateAccountStatus @accountID, 3
        RETURN 20002
      END
    END
    ELSE BEGIN
      /* 
       * User is not an account owner - ok to delete
       */

      DELETE registration     WHERE userID = @userID
      DELETE userPrivileges   WHERE userID = @userID
      DELETE privilegeDomains WHERE userID = @userID
      DELETE penalties        WHERE userID = @userID OR issuedBy = @userID
      DELETE history          WHERE userID = @userID
      DELETE warnings         WHERE userID = @userID
      DELETE userDetails      WHERE userID = @userID
      DELETE emailForwarding  WHERE userID = @userID
      DELETE users            WHERE userID = @userID
    
      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END
      COMMIT TRAN
    EMD
  END
END
GO
