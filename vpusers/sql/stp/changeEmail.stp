/* change user account's email */
/* input:  user name, new email 
   output: 
      20001 = unknown user
      20002 = not account owner
      20003 = incorrect old email
*/
CREATE PROC changeEmail ( @nickName VPuserID, @newEmail longName, @oldEmail longName )
AS
BEGIN
  DECLARE @diffFromGMT int
  DECLARE @currentDate VpTime
  DECLARE @accountID userIdentifier
  DECLARE @userID userIdentifier
  DECLARE @ownerID userIdentifier
  DECLARE @currentEmail longName
  DECLARE @lastError int

  BEGIN TRAN
    SELECT @diffFromGMT = gmt
      FROM getGMT
    IF @diffFromGMT IS NULL
      SELECT @diffFromGMT = 0
    
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    SELECT @currentDate = dateadd( hour, (-1) * @diffFromGMT, getdate() )
    /* turn all user ID to lower case, to get case insensitive comparisons */
    SELECT @nickName = lower(@nickName)
    SELECT @newEmail = lower(@newEmail)
    SELECT @oldEmail = lower(@oldEmail)

    SELECT @accountID = accountID,
           @userID = registration.userID
      FROM registration,users
      WHERE nickName = @nickName
      AND   registrationMode = 2
      AND   users.userID = registration.userID
    
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN 
      RETURN @lastError
    END

    /* unknown user ? */
    IF @accountID = NULL
    BEGIN
      ROLLBACK TRAN 
      RETURN 20001
    END

    SELECT @ownerID = ownerID,
           @currentEmail = email
      FROM userAccounts
      WHERE accountID = @accountID
    
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN 
      RETURN @lastError
    END

    /* make sure user is the account owner */
    IF @ownerID != @userID
    BEGIN
      ROLLBACK TRAN 
      RETURN 20002
    END

    /* make old email matches current email */
    IF @oldEmail != @currentEmail
    BEGIN
      ROLLBACK TRAN 
      RETURN 20003
    END

    /* OK to update the email address */
    UPDATE userAccounts
      SET lastUpdated = @currentDate,
          email = @newEmail
      WHERE accountID = @accountID
      AND   ownerID = @userID
    
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN 
      RETURN @lastError
    END

    /*
     * If the account has an active Paypal subscription, leave a 
     * tracking record so that future Paypal payments can still be
     * correlated with this account. Only add a tracking record the
     * first time the email is changed.
     */
    IF EXISTS (
      SELECT * FROM subscriptions
        WHERE accountID = @accountID
        AND type = 1
        AND autoRenew = 1 )
    BEGIN
      IF NOT EXISTS (
        SELECT * FROM paypalEmail 
          WHERE accountID = @accountID )
      BEGIN
        INSERT paypalEmail (email, accountID)
          VALUES (@oldEmail, @accountID)
      END
    END
  COMMIT TRAN
END
GO 
