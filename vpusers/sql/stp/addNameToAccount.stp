/* add a new user name to an account */
/* input:  user name, password
	   optional flag - override banned names list
   output: return value -
           negative value - DB failure, 
           0 - success,
           20001 - exceeded number of permitted accounts per account
           20002 - user name already in DB
           20003 - user name is banned 
           20004 - unknown accountID
           20005 - account closed or suspended
           20006 - account in NEW state
           20007 - account in PENDING state
		NOTE this restriction is lifted now
*/
CREATE PROC addNameToAccount
( 
  @nickName VPuserID,
  @password VPPassword,
  @accountID userIdentifier,
  @allowBanned bit = 0
)
AS
BEGIN
  DECLARE @localMode integer
  SELECT @localMode = 2
  DECLARE @maxNames integer
  DECLARE @diffFromGMT int
  DECLARE @currentDate VpTime
  DECLARE @buddyListName longName
  DECLARE @buddyListNameMask longName
  DECLARE @maxAutoName VPuserID
  DECLARE @nextAutoNumber int
  DECLARE @namesInUse integer
  DECLARE @newUserID userIdentifier
  DECLARE @lastError int
  
  SELECT @buddyListName = "buddy"
  SELECT @buddyListNameMask = @buddyListName + "%"
  
  /* turn all user ID to lower case, to get case insensitive comparisons */
  SELECT @nickName = lower(@nickName)
  SELECT @nickName = ltrim(@nickName)
  IF ( @nickName LIKE @buddyListNameMask )
  BEGIN
    -- banned name - "bdylist" is reserved for nick names
    -- to be automatically given to buddy list users
    RETURN 20003
  END
  

  BEGIN TRAN addName
    SELECT @diffFromGMT = gmt
      FROM getGMT
    IF @diffFromGMT IS NULL
      SELECT @diffFromGMT = 0
    
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN addName
      RETURN @lastError
    END

    SELECT @currentDate = dateadd( hour, (-1) * @diffFromGMT, getdate() )

    DECLARE @aid userIdentifier
    DECLARE @accountStatus tinyInt
    SELECT @aid = accountID,
           @accountStatus = accountStatus
    FROM userAccounts
    WHERE accountID = @accountID
    
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN addName
      RETURN @lastError
    END

    IF @aid != @accountID	/* ensure account ID exists */
    BEGIN
      SELECT @lastError = 20004
      ROLLBACK TRAN addName
      RETURN @lastError
    END

    IF @accountStatus > 2	/* check if account closed or frozen */
    BEGIN
      SELECT @lastError = 20005
      ROLLBACK TRAN addName
      RETURN @lastError
    END

    IF @accountStatus = 1	/* check if account in NEW state */
    BEGIN
      SELECT @lastError = 20006
      ROLLBACK TRAN addName
      RETURN @lastError
    END

    -- IF @accountStatus = 2	/* check if in PENDING state */
    -- BEGIN
      -- SELECT @lastError = 20007
      -- ROLLBACK TRAN addName
      -- RETURN @lastError
    -- END
    
    IF char_length(@nickName) > 0
    BEGIN
      /* check if name is banned */
      IF @allowBanned = 0
      BEGIN
        IF EXISTS 
          ( SELECT nickName FROM bannedNames 
              WHERE substring( @nickName, 1, char_length(nickName) )= nickName )
        BEGIN
          ROLLBACK TRAN addName
          RETURN 20003
        END
      END
      
      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN addName
        RETURN @lastError
      END

      IF EXISTS
        ( SELECT nickName FROM deadNames 
          WHERE @nickName = nickName )
      BEGIN
        ROLLBACK TRAN addName
        RETURN 20003
      END
     
      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN addName
        RETURN @lastError
      END
      
      IF EXISTS 
        ( SELECT nickName 
            FROM users
            WHERE ( nickName = @nickName ) AND
                  ( registrationMode = 2 )     )
      BEGIN
        ROLLBACK TRAN addName
        RETURN 20002
      END
      
      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN addName
        RETURN @lastError
      END
      
    END
    ELSE
    BEGIN
      /* empty nick name - 
         make a name for the user */
      SELECT @nextAutoNumber = 
        max( convert( int, 
                      substring( nickName, 
                                 char_length(@buddyListName)+1,
                                 20 ) ) ) /* hopefully, 20 digits will cover */
        FROM users
        WHERE ( nickName LIKE @buddyListNameMask ) AND
              ( registrationMode = 2 )
      IF @nextAutoNumber IS NULL
        SELECT @nextAutoNumber = 1
      ELSE
      BEGIN
        /* find the number */
        SELECT @nextAutoNumber = @nextAutoNumber + 1
      END
      SELECT @nickName = @buddyListName + ltrim(str(@nextAutoNumber))
    END
    SELECT @maxNames = nameLimit
      FROM userAccounts
      WHERE accountID = @accountID
    
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN addName
      RETURN @lastError
    END
    
    SELECT @namesInUse = count(*) 
      FROM registration
      WHERE ( accountID = @accountID )
    
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN addName
      RETURN @lastError
    END
    
    IF @namesInUse >= @maxNames
    BEGIN
      ROLLBACK TRAN addName
      RETURN 20001
    END
    ELSE
    BEGIN
      /* OK to insert user to DB */
      INSERT INTO users ( nickName, registrationMode, locked, restricted, penalties, warnings, ignores )
        VALUES ( @nickName, @localMode, 0, 0, 0, 0, 0 )
      
      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN addName
        RETURN @lastError
      END
      
      SELECT @newUserID = @@identity
      
      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN addName
        RETURN @lastError
      END
      
      DECLARE @email longName
      SELECT @email = @nickName + "@buddy"

      INSERT INTO registration
        ( userID, email, password, registrationDate, accountID ) 
        VALUES ( @newUserID, @email, @password, @currentDate, @accountID )
      
      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN addName
        RETURN @lastError
      END
      
      /*
       * update account stats
       */
      UPDATE renewals
        SET namesAdded = namesAdded + 1
        WHERE accountID = @accountID

      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN addName
        RETURN @lastError
      END
      
      /* write new user ID as an output row */
      SELECT @newUserID AS userID
    END
    /* returns 0 if successful, negative value otherwise */
  COMMIT TRAN addName
END
GO 
