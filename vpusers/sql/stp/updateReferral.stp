/*
 * Update a referral record
 *
 * Input: 
 *  referee's account ID
 *  flag - 1 = set payment date to 'now', 0 = no-op
 *  new type (optional)
 *
 * Output: 0 - success
 *         20001 - no such referral
 *         20002 - payment attempted on ineligible acct
 *         20003 - payment attempted to ineligible referrer
 */
CREATE PROC updateReferral ( @accountID userIdentifier, @paid bit, @type tinyint = NULL )
AS
BEGIN
  DECLARE @lastError int
  DECLARE @aid userIdentifier
  DECLARE @diffFromGMT int
  DECLARE @paymentDate VpTime
  DECLARE @accountStatus int
  DECLARE @refType int
  DECLARE @amount smallmoney
  DECLARE @referredByID userIdentifier
  
  BEGIN TRAN
    SELECT @aid = accountID,
           @referredByID = referredByID,
           @refType = type
      FROM referrals
      WHERE accountID = @accountID
    
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    IF @accountID != @aid
    BEGIN
      ROLLBACK TRAN
      RETURN 20001
    END

    /*
     * update the referral type field, if necessary
     */
    IF @type IS NOT NULL
    BEGIN
      UPDATE referrals
        SET type = @type
        WHERE accountID = @accountID
    
      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END

      SELECT @refType = @type
    END

    /*
     * marking a referral 'paid'
     */
    IF @paid = 1
    BEGIN
      /*
       * make sure the referee's account is eligible
       */
      SELECT @aid = accountID,
             @accountStatus = accountStatus
        FROM userAccounts
        WHERE accountID = @accountID
    
      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END

      IF @accountID != @aid
      BEGIN
        ROLLBACK TRAN
        RETURN 20001
      END

      IF @accountStatus != 0
      BEGIN
        ROLLBACK TRAN 
        RETURN 20002
      END

      /*
       * make sure referrer's account is eligible
       */
      SELECT @aid = accountID,
             @accountStatus = accountStatus
        FROM userAccounts
        WHERE accountID = @referredByID
    
      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END

      IF @aid != @referredByID
      BEGIN
        ROLLBACK TRAN
        RETURN 20001
      END

      /*
       * make sure the referrer's account is eligible
       */
      IF @accountStatus = 1 OR @accountStatus = 3 OR @accountStatus = 4
      BEGIN
        ROLLBACK TRAN 
        RETURN 20003
      END

      /*
       * infer referral bonus amount from referral type
       */
      IF @refType = 2
      BEGIN
        SELECT @amount = 10.00
      END
      ELSE
      BEGIN
        IF @refType = 3
        BEGIN
          -- SELECT @amount = 20.00	-- changed: 9/2003
          SELECT @amount = 10.00
        END
        ELSE
        BEGIN
          ROLLBACK TRAN
          RETURN 20002
        END
      END

      UPDATE accountBalance
        SET referral = referral + @amount
        WHERE accountID = @referredByID

      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END

      SELECT @diffFromGMT = gmt
        FROM getGMT
      IF @diffFromGMT IS NULL
        SELECT @diffFromGMT = 0
    
      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN 
        RETURN @lastError
      END

      SELECT @paymentDate = dateadd( hour, (-1) * @diffFromGMT, getDate() )

      UPDATE referrals
        SET paymentDate = @paymentDate
        WHERE accountID = @accountID
    
      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END
    
      INSERT referralHistory
        (accountID, processDate, amount, type)
        VALUES (@referredByID, @paymentDate, @amount, 1)
    
      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END
    END

  COMMIT TRAN
  RETURN 0
END
GO
