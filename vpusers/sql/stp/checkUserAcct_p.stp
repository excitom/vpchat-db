/*
 * Check user penalties and privileges.
 *
 * This differs from checkUserAcct in that it needs to return
 * everything in a single result set, so that it may be used in
 * a PHP page (the Sybase function in PHP does not handle multiple
 * result sets).
 *
 * Also, old kruft was stripped out.
 *
 */
IF EXISTS(SELECT name FROM sysobjects WHERE name='checkUserAcct_p' AND type='P')
 DROP PROC checkUserAcct_p
GO
CREATE PROC checkUserAcct_p ( @userToCheck VPuserID )
AS
BEGIN
  set transaction isolation level 0
  
  
  /* turn all user ID to lower case, to get case insensitive comparisons */
  SELECT @userToCheck = lower(@userToCheck)
  DECLARE @lastError int
  DECLARE @diffFromGMT int
  DECLARE @thisTime VpTime
  DECLARE @userID userIdentifier
  DECLARE @ownerID userIdentifier
  DECLARE @password VPPassword
  DECLARE @accountID userIdentifier
  DECLARE @accountStatus tinyint

  IF @diffFromGMT IS NULL
  BEGIN
    SELECT @diffFromGMT = gmt
    FROM getGMT
    
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      RETURN @lastError
    END
      
    IF @diffFromGMT IS NULL
      SELECT @diffFromGMT = 0
  END
    
  SELECT @thisTime = dateadd( hour, (-1) * @diffFromGMT, getdate() )
  
  BEGIN TRAN checkUserAcct
    SELECT @userID = userID
      FROM users
      WHERE ( registrationMode = 2) AND 
            ( nickName = @userToCheck )
  
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN checkUserAcct
      RETURN @lastError
    END
      
    IF @userID IS NULL
    BEGIN
      ROLLBACK TRAN checkUserAcct
      RETURN 20000
    END

    SELECT @password = password,
           @accountID = accountID
      FROM registration
      WHERE ( userID = @userID )
    
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN checkUserAcct
      RETURN @lastError
    END
      
    DECLARE @acctFlag int
    SELECT @acctFlag  = 0
    SELECT @ownerID = ownerID,
           @accountStatus = accountStatus
      FROM userAccounts
      WHERE accountID = @accountID

    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN checkUserAcct
      RETURN @lastError
    END

    IF @userID = @ownerID
    BEGIN
      SELECT @acctFlag = 1
    END
        
    SELECT 'userID', convert(varchar(20), @userID)
    UNION
    SELECT 'password', @password
    UNION
    SELECT 'penalty', convert(varchar(10), penaltyType)
      FROM penalties
      WHERE ( penalties.userID = @userID ) AND
            ( expiresOn > @thisTime )      AND
            ( forgiven = 0 )
    UNION
    SELECT 'locked',  convert(varchar(2), locked)
      FROM users
      WHERE userID = @userID
    UNION
    SELECT 'restricted',  convert(varchar(2), restricted)
      FROM users
      WHERE userID = @userID
    UNION
    SELECT 'privilege', convert(varchar(10), privilegeType)
      FROM userPrivileges
      WHERE ( userPrivileges.userID = @userID )
    UNION
    SELECT 'accountStatus', convert(varchar(2), @accountStatus)
    UNION
    SELECT 'accountID', convert(varchar(20), @accountID)
    UNION
    SELECT 'acctOwner', convert(varchar(20), @acctFlag)
      
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN checkUserAcct
      RETURN @lastError
    END
  COMMIT TRAN checkUserAcct
  
END
GO 
