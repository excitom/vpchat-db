/* Update payment records to indicate a held payment has cleared.

   There are two kinds of held payments -
   - eChecks, which are held until the bank says OK/bounced.
   - cc payment for a free trial, which is held until cancelled or 
      the trial period expires.

   status:
	0 = pending
	1 = cleared
	2 = rejected
	3 = completed free trial
	4 = cancelled free trial

   paymentStatus:
	0 = OK
	1 = unconfirmed
	2 = delinquent
	3 = waiting 
	4 = pending eCheck 
	5 = free trial
   accountStatus:
	0 = OK
	1 = new
	2 = pending
	3 = closed
	4 = suspended - penalty
	5 = suspended - overdue

   output: Return value - 0 - success 
			  1 - success, account was new
                          20001 - No such payment
			  20002 - was already cleared
			  20003 - invalid status
*/
CREATE PROC clearPayment ( @paymentID userIdentifier, @status tinyint )
AS
BEGIN
  DECLARE @accountID	userIdentifier
  DECLARE @paymentDate	VpTime
  DECLARE @amount	smallmoney
  DECLARE @AVS_result	varchar(10)
  DECLARE @shopperID	varchar(42)
  DECLARE @orderID	varchar(10)
  DECLARE @approvalCode	varchar(6)
  DECLARE @invoice      varchar(255)
  DECLARE @stat		tinyint
  DECLARE @pid 		userIdentifier
  DECLARE @lastError	int
  DECLARE @diffFromGMT	int
  DECLARE @renewalDate	VpTime
  DECLARE @subscription smallmoney
  DECLARE @accountStatus tinyint
  DECLARE @billingCycle tinyint
  DECLARE @updateRequired int
  DECLARE @bal		smallmoney
  DECLARE @ccID		userIdentifier
  DECLARE @pmtType	tinyint

  SELECT @updateRequired = 0
  SELECT @accountStatus = 0

  DECLARE @sPending     tinyint
  SELECT  @sPending =   0
  DECLARE @sEcOk        tinyint
  SELECT  @sEcOk    =   1
  DECLARE @sEcBad       tinyint
  SELECT  @sEcBad   =   2
  DECLARE @sFtOk        tinyint
  SELECT  @sFtOk    =   3
  DECLARE @sFtCanc      tinyint
  SELECT  @sFtCanc  =   4

  DECLARE @acctNew      tinyint
  SELECT  @acctNew    = 1
  DECLARE @acctPending  tinyint
  SELECT  @acctPending= 2
  DECLARE @acctClosed   tinyint
  SELECT  @acctClosed = 3
  DECLARE @acctSusp     tinyint
  SELECT  @acctSusp   = 4
  DECLARE @acctOverdue  tinyint
  SELECT  @acctOverdue= 5
  
  SELECT @paymentDate = getdate()

  BEGIN TRAN
    
    SELECT @diffFromGMT = gmt
      FROM getGMT
    IF @diffFromGMT IS NULL
      SELECT @diffFromGMT = 0
    
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN 
      RETURN @lastError
    END

    SELECT @paymentDate = dateadd( hour, (-1) * @diffFromGMT, @paymentDate )

    SELECT @pid          = paymentID,
           @accountID    = accountID,
	   @amount       = amount,
	   @AVS_result   = AVS_result,
	   @shopperID    = shopperID,
	   @orderID      = orderID,
	   @approvalCode = approvalCode,
	   @invoice      = comment,
	   @stat         = status,
	   @pmtType      = pmtType,
	   @ccID         = ccID
      FROM heldPayments
      WHERE paymentID = @paymentID
    
    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    IF @pid != @paymentID
    BEGIN
      ROLLBACK TRAN
      RETURN 20001
    END

    IF @stat != @sPending
    BEGIN
      ROLLBACK TRAN
      RETURN 20002
    END

    /*
     * If new status = REJECTED or CANCELLED FREE TRIAL
     * - update the heldPayment record status
     * - update account status = Overdue
     */
    IF @status = @sEcBad OR @status = @sFtCanc
    BEGIN
      UPDATE heldPayments
        SET status = @status
        WHERE paymentID = @paymentID

      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END

      /*
       * bounced check?
       */
      IF @status = @sEcBad
      BEGIN
        UPDATE renewals
          SET badChecks = badChecks + 1
          WHERE accountID = @accountID

        SELECT @lastError = @@error
        IF @lastError != 0
        BEGIN
          ROLLBACK TRAN
          RETURN @lastError
        END
      END

      COMMIT TRAN

      SELECT @bal = subscription
        FROM accountBalance
        WHERE accountID = @accountID

      IF @bal > 0
      BEGIN
        EXEC updateAccountStatus @accountID, @acctOverdue

        UPDATE userAccounts
          SET paymentStatus = 3
          WHERE accountID = @accountID
      END

      RETURN 0
    END /* end, rejected eCheck or cancelled free trial */

    IF @status != @sEcOk AND @status != @sFtOk
    BEGIN
      ROLLBACK TRAN
      RETURN 20003
    END


    /*
     * Status = Cleared
     */
    UPDATE heldPayments
      SET status = @status
      WHERE paymentID = @paymentID

    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    /*
     * Insert a payment record
     */
    INSERT INTO payments (accountID, paymentDate, amount, comment)
      VALUES (@accountID, @paymentDate, @amount, @invoice)

    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END
        
    /* get the unique payment ID */
    SELECT @pid = @@identity

    INSERT INTO ccPayments
      (paymentID, AVS_result, shopperID, orderID, approvalCode, pmtType, ccID)
      VALUES (@pid, @AVS_result, @shopperID, @orderID, @approvalCode, @pmtType, @ccID)

    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    UPDATE accountBalance
      SET subscription = subscription - @amount
      WHERE accountID = @accountID

    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    SELECT @subscription = subscription
      FROM accountBalance
      WHERE accountID = @accountID

    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    /*
     * Update the running balance
     */
    SELECT @bal = 0 - @subscription
    INSERT runningBalance (paymentID, balance) VALUES (@pid, @bal)

    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    /* if this payment is enough to clear the balance, set status OK */
    IF ROUND(@subscription,2) <= 0
    BEGIN
      UPDATE userAccounts
        SET paymentStatus = 0
        WHERE accountID = @accountID

      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END

      SELECT @renewalDate   = renewalDate,
             @billingCycle  = billingCycle,
             @accountStatus = accountStatus
        FROM userAccounts 
        WHERE accountID = @accountID

      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END

      /* if account was suspended for non-payment, but payment 
         was received, set accountStatus to OK

         also update account status if account was new or pending
      */
      IF @accountStatus = @acctOverdue
       OR @accountStatus = @acctNew
       OR @accountStatus = @acctPending
      BEGIN
        /* 
           Update the renewal date if
           - Renewal date is past
           - Account balance 0 or credit
           - Account was New,Pending, or Overdue
           OR
           - Account balance 0 or credit
           - Account was New

           In the latter case, the new renewal date is adjusted forward the
                number of days between the registration date and today.
           
        */

        IF @paymentDate >= @renewalDate
        BEGIN
          /*
           * If Pending, then person has been using the account in the interim
           * so the new renewal date = renewal date + billing cycle.
           */
          IF @accountStatus = @acctPending
          BEGIN
            SELECT @renewalDate = dateadd( month, @billingCycle, @renewalDate )
          END
          /*
           * If New or Overdue, then person has NOT been using the account
           * in the interim since the renewal date passed, so set new
           * renewal date = today + billing cycle.
           */
          ELSE BEGIN
            SELECT @renewalDate = dateadd( month, @billingCycle, @paymentDate )
          END
          UPDATE userAccounts
            SET renewalDate = @renewalDate
            WHERE accountID = @accountID

          SELECT @lastError = @@error
          IF @lastError != 0
          BEGIN
            ROLLBACK TRAN
            RETURN @lastError
          END

          /*
           * Since this payment has renewed a subscription, update the stats
           */
          UPDATE renewals
            SET months = months + @billingCycle,
                renewals = renewals + 1
            WHERE accountID = @accountID

          SELECT @lastError = @@error
          IF @lastError != 0
          BEGIN
            ROLLBACK TRAN
            RETURN @lastError
          END
        END /* end, past renewal date */
        ELSE
        BEGIN
          /*
           * Not past renewal date, but new account. Adjust the renewal date
           * ahead based on days past registration date. Why not just add the
           * billing cycle to today's date? Because of promos that give 
           * extra time for the first billing period.
           */
          IF @accountStatus = @acctNew
          BEGIN
            DECLARE @delta int
            DECLARE @creationDate VpTime
            SELECT @creationDate = creationDate
              FROM userAccounts
              WHERE accountID = @accountID

            SELECT @lastError = @@error
            IF @lastError != 0
            BEGIN
              ROLLBACK TRAN
              RETURN @lastError
            END

            SELECT @delta = DATEDIFF (day, @creationDate, @paymentDate)
            SELECT @renewalDate = dateadd( day, @delta, @renewalDate )
            UPDATE userAccounts
              SET renewalDate = @renewalDate
              WHERE accountID = @accountID

            SELECT @lastError = @@error
            IF @lastError != 0
            BEGIN
              ROLLBACK TRAN
              RETURN @lastError
            END
          END /* end, NEW account */

          /*
           * If this is a first time payment, initialize
           * the stats with the term of the subscr.
           */
          UPDATE renewals
            SET months = @billingCycle
            WHERE accountID = @accountID
            AND months = 0

          SELECT @lastError = @@error
          IF @lastError != 0
          BEGIN
            ROLLBACK TRAN
            RETURN @lastError
          END
        END /* end, NOT past renewal date */

      END /* end, new, pending, or overdue */

      SELECT @updateRequired = 1

    END /* end, balance 0 or credit */
    /*
     * balance still owed - set pmt status = waiting
     */
    ELSE BEGIN
      UPDATE userAccounts
        SET paymentStatus = 3
        WHERE accountID = @accountID

      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END

    END

    /*
     * Cleared check?
     */
    IF @status = @sEcOk
    BEGIN
      UPDATE renewals
        SET goodChecks = goodChecks + 1
        WHERE accountID = @accountID

      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END
    END

  COMMIT TRAN

  IF @updateRequired = 1
  BEGIN
    EXEC updateAccountStatus @accountID, 0
  END

  DECLARE @rc int
  IF @accountStatus = 1
  BEGIN
    SELECT @rc = 1
  END
  ELSE BEGIN
    SELECT @rc = 0
  END
  RETURN @rc
END
GO
