/* 
 * Merge names from one account into another account, transferring 
 * account history information as needed.
 *
 * Input: From Account ID, To Account ID
 *
 * Only unlocked user names are transferred.
 *
 * Output: Return value - 0 - success
 *                        20000 - from account doesn't exist
 *                        20001 - to account doesn't exist
*/
CREATE PROC mergeAccounts (
    @from userIdentifier,
    @to userIdentifier
)
AS
BEGIN
  DECLARE @lastError int

  BEGIN TRAN
    
    IF NOT EXISTS 
      ( SELECT * FROM userAccounts WHERE accountID = @from )
    BEGIN
      ROLLBACK TRAN
      RETURN 20000
    END 
    
    IF NOT EXISTS 
      ( SELECT * FROM userAccounts WHERE accountID = @to )
    BEGIN
      ROLLBACK TRAN
      RETURN 20001
    END 

    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    /*
     * move the unlocked user names to the new account
     * - this allows names to be selectively transferred
     * - the unselected names are left with the zombie account
     */
    UPDATE registration
      SET accountID = @to
      WHERE accountID = @from
      AND userID IN
        (SELECT registration.userID FROM users,registration
           WHERE locked = 0
           AND accountID = @from
           AND registration.userID=users.userID)

    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    /*
     * remove acct owner from the old account
     */
    UPDATE userAccounts
      SET ownerID = 0
        WHERE accountID = @from

      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END

    EXEC updateAccountStatus @from, 3

  COMMIT TRAN

  /*
   * Add a history record 
   */
  EXEC addAcctHistory @to, 16, @from
END
GO
