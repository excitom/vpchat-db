/*
 * Post the results of a game
 *
 * Front end interface using userIDs
 *
 * See postResultsCommon.stp for the actual function.
 * 
 * Author: Tom Lang 10/2004
 */
IF EXISTS
 (SELECT name FROM sysobjects WHERE name = 'postGameResultsByID' AND type = 'P') 
 DROP PROC postGameResultsByID
GO  
CREATE PROC postGameResultsByID ( 
	@gameID		userIdentifier,
	@gameTypeID	userIdentifier,
	@ladderName	longName output,
	@numPlayers	tinyint,
	@mask		tinyint,
	@slot1		int,
	@userID1	userIdentifier,
	@score1		int output,
	@slot2		int = NULL,
	@userID2	userIdentifier = NULL,
	@score2		int = NULL output,
	@slot3		int = NULL,
	@userID3	userIdentifier = NULL,
	@score3		int = NULL output,
	@slot4		int = NULL,
	@userID4	userIdentifier = NULL,
	@score4		int = NULL output,
	@whenPlayed	VpTime = NULL
)
AS
BEGIN
  DECLARE @lastError	int
  DECLARE @maxPlayers	tinyint
  DECLARE @scoreFmt	tinyint
  DECLARE @player1	VPuserID
  DECLARE @player2	VPuserID
  DECLARE @player3	VPuserID
  DECLARE @player4	VPuserID

  IF @gameID IS NOT NULL 
  AND @gameID > 0
  AND EXISTS (SELECT * FROM gameResultsPri
		WHERE gameID = @gameID)
  BEGIN
    RETURN 2		-- results already posted
  END

  IF @numPlayers = 1
  BEGIN
    RETURN 1		-- ignore single player game (e.g. yahtzee with
  END			-- no opponents)

  /* Get the score format for this game type
   * -- 0 => 1=winner, 0=loser (e.g. chess, checkers, battleship)
   * -- 1 => 1=winner, 0=loser, 2=win by gammon, 3=win by backgammon
   *	(e.g. backgammon, acey deucy)
   * -- 2 => score is an integer (e.g. yahtzee)
   * -- 3 => score is an integer, team play (e.g. spades)
   */
  SELECT @scoreFmt = NULL
  SELECT @maxPlayers = maxPlayers,
	 @scoreFmt = scoreFmt
    FROM gameTypes
    WHERE gameTypeID = @gameTypeID

  SELECT @lastError = @@error
  IF @lastError != 0
  BEGIN
    RETURN @lastError
  END

  IF @scoreFmt IS NULL	-- invalid game type
  BEGIN
    RETURN 20001
  END

  IF @scoreFmt = 2	-- Yahtzee: 1,2,3 or 4 players
  BEGIN
    IF @numPlayers > @maxPlayers
    BEGIN
      RETURN 100
    END
  END
  ELSE BEGIN
    IF @numPlayers != @maxPlayers	-- confirm expected # of players
    BEGIN
      RETURN 100
    END
  END
  /* Note: Information about game slots may be input in any order. For
   * example the @slot1 parameter may contain a 2, indicating it's 
   * describing the player in slot 2 of the game.
   */
  IF @slot1 < 1 OR @slot1 > @maxPlayers
    RETURN 101
  IF (@slot2 IS NOT NULL AND (@slot2 <1 OR @slot2 > @maxPlayers))
    RETURN 102
  IF (@slot3 IS NOT NULL AND (@slot3 <1 OR @slot3 > @maxPlayers))
    RETURN 103
  IF (@slot4 IS NOT NULL AND (@slot4 <1 OR @slot4 > @maxPlayers))
    RETURN 104

  SELECT @player1 = nickName
    FROM vpusers..users
    WHERE userID = @userID1

  IF @userID2 IS NOT NULL
  BEGIN
    SELECT @player2 = nickName
      FROM vpusers..users
      WHERE userID = @userID2
  END

  IF @userID3 IS NOT NULL
  BEGIN
    SELECT @player3 = nickName
      FROM vpusers..users
      WHERE userID = @userID3
  END

  IF @userID4 IS NOT NULL
  BEGIN
    SELECT @player4 = nickName
      FROM vpusers..users
      WHERE userID = @userID4
  END

  SELECT @lastError = @@error
  IF @lastError != 0
  BEGIN
    RETURN @lastError
  END

  EXEC @lastError = postResultsCommon @gameID, @gameTypeID, @ladderName output, @numPlayers, @maxPlayers, @scoreFmt, @mask, @slot1, @userID1, @player1, @score1 output, @slot2, @userID2, @player2, @score2 output ,@slot3, @userID3, @player3, @score3 output, @slot4, @userID4, @player4, @score4 output

  RETURN @lastError
END
GO
