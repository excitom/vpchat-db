/*
 * Add a new private notify list
 *
 * Lists are unique by description. For history-keeping purposes, a
 * list is never destroyed. It can be marked deleted, but it remains
 * in the system. A deleted list can be reactivated by adding it again.
 *
 *   Type: lower 2 bits indicate a broadcast list
 *           0x01 - family broadcast
 *           0x02 - adult broadcast
 *           0x04 - broadcast to chatters
 *           0x08 - broadcast to buddies
 *           0x10 - adult event (non-broadcast)
 *           0x20 - internal event
 *           0x40 - user-owned list
 *           0x100 - game ladder
 *
 * Output: 0 = success
 *         1 = success, list had been deleted
 *         20000 = duplicate name
 *         20005 = invalid account status for this action
 */
IF EXISTS (SELECT name FROM sysobjects WHERE name='addPrivateNotifyList' AND type='P')
  DROP PROC addPrivateNotifyList
GO
CREATE PROC addPrivateNotifyList ( 
	@description	longName,
	@accountID	userIdentifier,   -- list owner's account
	@type		int = 64,
	@subheader	longName = NULL,
	@URL		longName = NULL,
	@unlisted	bit = 0,
	@approvalRqd	bit = 0,
	@adultContent	bit = 0
)
AS
BEGIN
  DECLARE @lastError	int
  DECLARE @rc		int
  DECLARE @accountStatus	int
  DECLARE @notifyID	userIdentifier
  DECLARE @userID	userIdentifier
  DECLARE @deleted	bit

  /* Remove extraneous white space */

  SELECT @description = ltrim(@description)
  SELECT @subheader   = ltrim(@subheader)
  SELECT @URL         = ltrim(@URL)
  SELECT @description = rtrim(@description)
  SELECT @subheader   = rtrim(@subheader)
  SELECT @URL         = rtrim(@URL)

  /* Find default message limits */

  DECLARE @maxMsgs int
  SELECT @maxMsgs = intValue
    FROM vpusers..configurationKeys
    WHERE keyName = 'userAlertMsgLimit'

  IF @maxMsgs IS NULL
  BEGIN
    SELECT @maxMsgs = 1
  END

  DECLARE @msgInterval	int
  SELECT @msgInterval = intValue
    FROM vpusers..configurationKeys
    WHERE keyName = 'userAlertMsgIntrvl'

  IF @msgInterval IS NULL
  BEGIN
    SELECT @msgInterval = 1
  END

  BEGIN TRAN

    /* Confirm the account is valid and the status is OK */

    SELECT @accountStatus = accountStatus
      FROM vpusers..userAccounts
      WHERE accountID = @accountID

    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    IF @accountStatus != 0
    BEGIN
      ROLLBACK TRAN
      RETURN 20005
    END

    /* Get the acount owner */

    SELECT @userID = vpusers..userAccounts.ownerID
      FROM vpusers..userAccounts
      WHERE accountID = @accountID

    IF @userID IS NULL
    BEGIN
      ROLLBACK TRAN
      RETURN 20004
    END

    /* Check for duplicate description */

    SELECT @notifyID = notifyID, @deleted = deleted
      FROM notifyLists
      WHERE description = @description

    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    IF @notifyID IS NOT NULL
    BEGIN
      IF @deleted = 0
      BEGIN
        ROLLBACK TRAN
        RETURN 20000
      END

      /* Restoring a deleted list */

      UPDATE notifyLists
        SET deleted = 0, locked = 1, type = @type, subheader = @subheader
        WHERE notifyID = @notifyID

      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END

      SELECT @rc = 1
    END

    /* Creating a new list */

    ELSE BEGIN
      INSERT notifyLists ( description, subheader, locked, deleted, type )
        VALUES ( @description, @subheader, 1, 0, @type )

      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END

      SELECT @notifyID = @@identity

      SELECT @rc = 0
    END

    IF EXISTS (SELECT * FROM privateLists WHERE notifyID = @notifyID)
    BEGIN
      UPDATE privateLists 
        SET URL = @URL, unlisted = @unlisted, approvalRqd = @approvalRqd, adultContent = @adultContent
        WHERE notifyID = @notifyID

      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END
    END
    ELSE BEGIN
      INSERT privateLists (notifyID, URL, unlisted, approvalRqd, adultContent)
        VALUES ( @notifyID, @URL, @unlisted, @approvalRqd, @adultContent )

      SELECT @lastError = @@error
      IF @lastError != 0
      BEGIN
        ROLLBACK TRAN
        RETURN @lastError
      END
    END

    /* Give the owner privilege to use this list */

    INSERT notifyAccessList (notifyID, userID, accountID, maxMsgs, msgInterval, msgCount, locked, accessPriv)
        VALUES (@notifyID, @userID, @accountID, @maxMsgs, @msgInterval, 0, 0, 1)

    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    /* Subscribe the owner to this list */

    INSERT notifySubscrs (notifyID, userID, notifyPref)
        VALUES(@notifyID, @userID, 7)

    SELECT @lastError = @@error
    IF @lastError != 0
    BEGIN
      ROLLBACK TRAN
      RETURN @lastError
    END

    /* Return the list ID */

    SELECT @notifyID AS notifyID

  COMMIT TRAN
  RETURN @rc
END
GO
