/* Find all places for a given PTG page
 */
/*
  INPUT  : pageType (Cool = 0, Events = 1, All= 2, Category = 3),
           category id, exclude shadow places flag,
           unify replicates flag, minimum people in place
  OUTPUT : all details from the PTG list file 
*/
CREATE PROC getPagePlaces(
	@pageType	integer,
	@categoryId	categoryIdentifier,
	@exclShadow	bit,
	@unifyRepl	bit,
	@minPeople	integer
)
AS
BEGIN
  DECLARE @lastError integer

  CREATE TABLE #tempTable (URL varchar(255), title varchar(255), 
                           roomUsage integer, corrUsage integer, type integer,
			   capacity integer, repCount integer)
  SELECT @lastError = @@error
  IF @lastError != 0
    RETURN @lastError

  IF @pageType = 0		/* Cool Places */
   INSERT #tempTable 
      SELECT URL,title,roomUsage,corrUsage,type,capacity,repCount
        FROM vpPlacesList 
        WHERE URL NOT LIKE "vpbuddy://%" AND
              serialNumber != -1 AND
              URL IN (SELECT URL 
		      FROM persistentPlaces 
                      WHERE type != 2049)
  ELSE
  IF @pageType = 1		/* Auditorium Places */
  BEGIN
    INSERT #tempTable
      SELECT URL,title,roomUsage,corrUsage,type,capacity,repCount
        FROM vpPlacesList 
        WHERE URL NOT LIKE "vpbuddy://%" AND
              serialNumber != -1 AND
              URL IN (SELECT URL 
		      FROM persistentPlaces 
                      WHERE type = 2049)
    SELECT @lastError = @@error
    IF @lastError != 0
      RETURN @lastError

    UPDATE #tempTable
      SET capacity = rowSize * numberOfRows
      FROM #tempTable, persistentPlaces
      WHERE #tempTable.URL = persistentPlaces.URL
  END  
  ELSE
  IF @pageType = 2		/* All Places */
    INSERT #tempTable
      SELECT URL,title,roomUsage,corrUsage,type,capacity,repCount
        FROM vpPlacesList 
        WHERE URL NOT LIKE "vpbuddy://%" AND
              serialNumber != -1 
  ELSE
  IF @pageType = 3		/* Category Places */
  BEGIN
    /* Get all the places matching a place prefix for this category */
    INSERT #tempTable
      SELECT vpPlacesList.URL,title,roomUsage,corrUsage,type,capacity,repCount
        FROM vpPlacesList, placeCategories 
        WHERE vpPlacesList.URL NOT LIKE "vpbuddy://%" AND
            serialNumber != -1 AND
            category = @categoryId AND
            vpPlacesList.URL LIKE (placeCategories.URL + "%")
    SELECT @lastError = @@error
    IF @lastError != 0
      RETURN @lastError
    /* Add all the places prefixes for this category if not already
       in the table (from the server's snapshot -- vpPlaces table).
       only the URL is important, the rest are dummy values */
    INSERT #tempTable
      SELECT placeCategories.URL, placeCategories.URL, 0, 0, 0, 25, 0
      FROM placeCategories
      WHERE placeCategories.category = @categoryId AND
	placeCategories.URL NOT IN (SELECT URL FROM #tempTable) 
  END
  IF @lastError != 0
    RETURN @lastError

  IF @exclShadow = 1
  BEGIN
    IF @unifyRepl = 1
      SELECT DISTINCT URL, title, sum(roomUsage), sum(corrUsage), 
             type, max(capacity), count(repCount)
        FROM #tempTable
        WHERE URL NOT IN (SELECT #tempTable.URL 
                            FROM #tempTable, shadowPlaces
		            WHERE #tempTable.URL LIKE (shadowPlaces.URL + "%"))
        GROUP BY URL
        HAVING sum(roomUsage) + sum(corrUsage) >= @minPeople
        ORDER BY sum(roomUsage) DESC,sum(corrUsage) DESC
    ELSE
      SELECT *
        FROM #tempTable
        WHERE (roomUsage + corrUsage)>= @minPeople AND
              URL NOT IN (SELECT #tempTable.URL 
                            FROM #tempTable, shadowPlaces
		            WHERE #tempTable.URL LIKE (shadowPlaces.URL + "%"))
        ORDER BY roomUsage DESC ,corrUsage DESC
  END
  ELSE 		/* Do not exclude shadow places */
  BEGIN
    IF @unifyRepl = 1
      SELECT DISTINCT URL, title, sum(roomUsage), sum(corrUsage), 
             type, max(capacity), count(repCount)
        FROM #tempTable
        GROUP BY URL
        HAVING sum(roomUsage) + sum(corrUsage) >= @minPeople
        ORDER BY sum(roomUsage) DESC, sum(corrUsage) DESC 
    ELSE
      SELECT *
        FROM #tempTable
        WHERE (roomUsage + corrUsage)>= @minPeople 
        ORDER BY  roomUsage DESC,corrUsage DESC
  END
END
GO 
